"""PDF export functionality for summaries."""

from datetime import datetime
from io import BytesIO
from typing import Any

from reportlab.lib import colors
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import ParagraphStyle, getSampleStyleSheet
from reportlab.lib.units import inch
from reportlab.platypus import PageBreak, Paragraph, SimpleDocTemplate, Spacer


class PDFExporter:
    """Export summaries to PDF format."""
    
    def __init__(self, page_size=letter):
        self.page_size = page_size
        self.styles = getSampleStyleSheet()
        self._setup_custom_styles()
    
    def _setup_custom_styles(self):
        """Setup custom paragraph styles."""
        # Title style
        self.styles.add(ParagraphStyle(
            name='CustomTitle',
            parent=self.styles['Title'],
            fontSize=24,
            textColor=colors.HexColor('#1a202c'),
            spaceAfter=30,
            alignment=1  # Center alignment
        ))
        
        # Metadata style
        self.styles.add(ParagraphStyle(
            name='Metadata',
            parent=self.styles['Normal'],
            fontSize=10,
            textColor=colors.HexColor('#718096'),
            spaceAfter=12,
            alignment=1  # Center alignment
        ))
        
        # Summary content style
        self.styles.add(ParagraphStyle(
            name='SummaryContent',
            parent=self.styles['Normal'],
            fontSize=12,
            leading=18,
            textColor=colors.HexColor('#2d3748'),
            spaceAfter=12,
            firstLineIndent=0,
            alignment=4  # Justify alignment
        ))
        
        # Section header style
        self.styles.add(ParagraphStyle(
            name='SectionHeader',
            parent=self.styles['Heading2'],
            fontSize=16,
            textColor=colors.HexColor('#2b6cb0'),
            spaceAfter=12,
            spaceBefore=20
        ))
    
    async def export_summary_as_pdf(
        self,
        summary_text: str,
        metadata: dict[str, Any]
    ) -> bytes:
        """Export a summary to PDF format."""
        # Create a BytesIO buffer
        buffer = BytesIO()
        
        # Create the PDF document
        doc = SimpleDocTemplate(
            buffer,
            pagesize=self.page_size,
            rightMargin=72,
            leftMargin=72,
            topMargin=72,
            bottomMargin=72
        )
        
        # Container for the 'Flowable' objects
        story = []
        
        # Add title
        title = metadata.get('filename', 'Document Summary')
        story.append(Paragraph(title, self.styles['CustomTitle']))
        
        # Add metadata
        created_at = metadata.get('created_at', datetime.now().isoformat())
        processing_time = metadata.get('processing_time', 0)
        
        if isinstance(created_at, str):
            try:
                created_date = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                formatted_date = created_date.strftime('%B %d, %Y at %I:%M %p')
            except (ValueError, AttributeError):
                formatted_date = created_at
        else:
            formatted_date = created_at.strftime('%B %d, %Y at %I:%M %p')
        
        metadata_text = f"Generated on {formatted_date}<br/>Processing time: {processing_time:.1f} seconds"
        story.append(Paragraph(metadata_text, self.styles['Metadata']))
        story.append(Spacer(1, 0.5*inch))
        
        # Add summary header
        story.append(Paragraph("Summary", self.styles['SectionHeader']))
        
        # Process summary text into paragraphs
        paragraphs = summary_text.split('\n\n')
        for para in paragraphs:
            if para.strip():
                # Handle bullet points
                if para.strip().startswith('- ') or para.strip().startswith('• '):
                    # Convert to proper bullet points
                    lines = para.strip().split('\n')
                    for line in lines:
                        if line.strip().startswith('- ') or line.strip().startswith('• '):
                            bullet_text = '• ' + line.strip()[2:]
                            story.append(Paragraph(bullet_text, self.styles['SummaryContent']))
                else:
                    story.append(Paragraph(para.strip(), self.styles['SummaryContent']))
        
        # Add footer
        story.append(Spacer(1, 0.5*inch))
        footer_style = ParagraphStyle(
            name='Footer',
            parent=self.styles['Normal'],
            fontSize=8,
            textColor=colors.HexColor('#a0aec0'),
            alignment=1
        )
        story.append(Paragraph("Generated by PDF Summarizer", footer_style))
        
        # Build the PDF
        doc.build(story)
        
        # Get the PDF bytes
        pdf_bytes = buffer.getvalue()
        buffer.close()
        
        return pdf_bytes
    
    async def export_multiple_summaries_as_pdf(
        self,
        summaries: list[dict[str, Any]]
    ) -> bytes:
        """Export multiple summaries to a single PDF."""
        buffer = BytesIO()
        
        doc = SimpleDocTemplate(
            buffer,
            pagesize=self.page_size,
            rightMargin=72,
            leftMargin=72,
            topMargin=72,
            bottomMargin=72
        )
        
        story = []
        
        # Add document title
        story.append(Paragraph("Summary Collection", self.styles['CustomTitle']))
        story.append(Spacer(1, 0.5*inch))
        
        # Add each summary
        for i, summary_data in enumerate(summaries):
            if i > 0:
                story.append(PageBreak())
            
            # Add summary title
            title = summary_data.get('filename', f'Document {i+1}')
            story.append(Paragraph(title, self.styles['SectionHeader']))
            
            # Add summary content
            summary_text = summary_data.get('summary', '')
            paragraphs = summary_text.split('\n\n')
            for para in paragraphs:
                if para.strip():
                    story.append(Paragraph(para.strip(), self.styles['SummaryContent']))
            
            story.append(Spacer(1, 0.3*inch))
        
        # Build the PDF
        doc.build(story)
        
        pdf_bytes = buffer.getvalue()
        buffer.close()
        
        return pdf_bytes