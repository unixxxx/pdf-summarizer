"""Export service for generating summary documents in various formats."""

from datetime import datetime
from io import BytesIO
from typing import Optional

from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import inch
from reportlab.platypus import (
    Paragraph,
    SimpleDocTemplate,
    Spacer,
)
import markdown2


class ExportService:
    """Service for exporting summaries in different formats."""
    
    @staticmethod
    async def export_as_markdown(
        summary: str,
        filename: str,
        metadata: Optional[dict] = None,
        tags: Optional[list] = None,
    ) -> bytes:
        """Export summary as Markdown."""
        lines = []
        
        # Title
        lines.append(f"# {filename}")
        lines.append("")
        
        # Metadata
        if metadata:
            lines.append("## Document Information")
            lines.append(f"- **Pages**: {metadata.get('pages', 'N/A')}")
            lines.append(f"- **Size**: {metadata.get('size_mb', 'N/A')} MB")
            if metadata.get('author'):
                lines.append(f"- **Author**: {metadata['author']}")
            lines.append(f"- **Processed**: {datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')}")
            lines.append("")
        
        # Tags
        if tags:
            lines.append("## Tags")
            lines.append(", ".join([f"`{tag}`" for tag in tags]))
            lines.append("")
        
        # Summary
        lines.append("## Summary")
        lines.append("")
        lines.append(summary)
        lines.append("")
        
        # Footer
        lines.append("---")
        lines.append(f"*Generated by PDF Summarizer on {datetime.utcnow().strftime('%Y-%m-%d')}*")
        
        return "\n".join(lines).encode('utf-8')
    
    @staticmethod
    async def export_as_pdf(
        summary: str,
        filename: str,
        metadata: Optional[dict] = None,
        tags: Optional[list] = None,
    ) -> bytes:
        """Export summary as PDF."""
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=letter)
        story = []
        styles = getSampleStyleSheet()
        
        # Title
        title_style = styles['Title']
        story.append(Paragraph(filename, title_style))
        story.append(Spacer(1, 0.5*inch))
        
        # Metadata
        if metadata:
            story.append(Paragraph("Document Information", styles['Heading2']))
            info_lines = []
            info_lines.append(f"• Pages: {metadata.get('pages', 'N/A')}")
            info_lines.append(f"• Size: {metadata.get('size_mb', 'N/A')} MB")
            if metadata.get('author'):
                info_lines.append(f"• Author: {metadata['author']}")
            info_lines.append(f"• Processed: {datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')}")
            
            for line in info_lines:
                story.append(Paragraph(line, styles['Normal']))
            story.append(Spacer(1, 0.3*inch))
        
        # Tags
        if tags:
            story.append(Paragraph("Tags", styles['Heading2']))
            tag_text = ", ".join(tags)
            story.append(Paragraph(tag_text, styles['Normal']))
            story.append(Spacer(1, 0.3*inch))
        
        # Summary
        story.append(Paragraph("Summary", styles['Heading2']))
        story.append(Spacer(1, 0.2*inch))
        
        # Split summary into paragraphs
        for para in summary.split('\n\n'):
            if para.strip():
                story.append(Paragraph(para, styles['Normal']))
                story.append(Spacer(1, 0.1*inch))
        
        # Footer
        story.append(Spacer(1, 0.5*inch))
        footer_text = f"<i>Generated by PDF Summarizer on {datetime.utcnow().strftime('%Y-%m-%d')}</i>"
        story.append(Paragraph(footer_text, styles['Normal']))
        
        # Build PDF
        doc.build(story)
        buffer.seek(0)
        return buffer.read()
    
    @staticmethod
    async def export_as_text(
        summary: str,
        filename: str,
        metadata: Optional[dict] = None,
        tags: Optional[list] = None,
    ) -> bytes:
        """Export summary as plain text."""
        lines = []
        
        # Title
        lines.append(filename)
        lines.append("=" * len(filename))
        lines.append("")
        
        # Metadata
        if metadata:
            lines.append("Document Information:")
            lines.append(f"  Pages: {metadata.get('pages', 'N/A')}")
            lines.append(f"  Size: {metadata.get('size_mb', 'N/A')} MB")
            if metadata.get('author'):
                lines.append(f"  Author: {metadata['author']}")
            lines.append(f"  Processed: {datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')}")
            lines.append("")
        
        # Tags
        if tags:
            lines.append("Tags:")
            lines.append(f"  {', '.join(tags)}")
            lines.append("")
        
        # Summary
        lines.append("Summary:")
        lines.append("-" * 8)
        lines.append("")
        lines.append(summary)
        lines.append("")
        
        # Footer
        lines.append("-" * 40)
        lines.append(f"Generated by PDF Summarizer on {datetime.utcnow().strftime('%Y-%m-%d')}")
        
        return "\n".join(lines).encode('utf-8')