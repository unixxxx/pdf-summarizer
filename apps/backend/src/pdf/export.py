"""Export service for generating summary documents in various formats."""

from datetime import datetime
from io import BytesIO
from typing import Optional

from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import (
    Paragraph,
    SimpleDocTemplate,
    Spacer,
)
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.fonts import addMapping
import markdown2


class ExportService:
    """Service for exporting summaries in different formats."""
    
    @staticmethod
    async def export_as_markdown(
        summary: str,
        filename: str,
        metadata: Optional[dict] = None,
        tags: Optional[list] = None,
    ) -> bytes:
        """Export summary as Markdown."""
        lines = []
        
        # Title
        lines.append(f"# {filename}")
        lines.append("")
        
        # Metadata
        if metadata:
            lines.append("## Document Information")
            lines.append(f"- **Pages**: {metadata.get('pages', 'N/A')}")
            lines.append(f"- **Size**: {metadata.get('size_mb', 'N/A')} MB")
            if metadata.get('author'):
                lines.append(f"- **Author**: {metadata['author']}")
            lines.append(f"- **Processed**: {datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')}")
            lines.append("")
        
        # Tags
        if tags:
            lines.append("## Tags")
            lines.append(", ".join([f"`{tag}`" for tag in tags]))
            lines.append("")
        
        # Summary
        lines.append("## Summary")
        lines.append("")
        lines.append(summary)
        lines.append("")
        
        # Footer
        lines.append("---")
        lines.append(f"*Generated by PDF Summarizer on {datetime.utcnow().strftime('%Y-%m-%d')}*")
        
        return "\n".join(lines).encode('utf-8')
    
    @staticmethod
    async def export_as_pdf(
        summary: str,
        filename: str,
        metadata: Optional[dict] = None,
        tags: Optional[list] = None,
    ) -> bytes:
        """Export summary as PDF."""
        from xml.sax.saxutils import escape
        
        # Helper function to escape text for ReportLab
        def safe_text(text: str) -> str:
            """Escape text for safe use in ReportLab Paragraphs."""
            if not text:
                return ""
            # Escape XML special characters
            return escape(str(text))
        
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=letter)
        story = []
        styles = getSampleStyleSheet()
        
        # Title
        title_style = styles['Title']
        story.append(Paragraph(safe_text(filename), title_style))
        story.append(Spacer(1, 0.5*inch))
        
        # Metadata
        if metadata:
            story.append(Paragraph("Document Information", styles['Heading2']))
            info_lines = []
            info_lines.append(f"• Pages: {metadata.get('pages', 'N/A')}")
            info_lines.append(f"• Size: {metadata.get('size_mb', 'N/A')} MB")
            if metadata.get('author'):
                info_lines.append(f"• Author: {safe_text(metadata['author'])}")
            info_lines.append(f"• Processed: {datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')}")
            
            for line in info_lines:
                story.append(Paragraph(line, styles['Normal']))
            story.append(Spacer(1, 0.3*inch))
        
        # Tags
        if tags:
            story.append(Paragraph("Tags", styles['Heading2']))
            tag_text = ", ".join([safe_text(tag) for tag in tags])
            story.append(Paragraph(tag_text, styles['Normal']))
            story.append(Spacer(1, 0.3*inch))
        
        # Summary
        story.append(Paragraph("Summary", styles['Heading2']))
        story.append(Spacer(1, 0.2*inch))
        
        # Split summary into paragraphs
        for para in summary.split('\n\n'):
            if para.strip():
                story.append(Paragraph(safe_text(para), styles['Normal']))
                story.append(Spacer(1, 0.1*inch))
        
        # Footer
        story.append(Spacer(1, 0.5*inch))
        footer_text = f"<i>Generated by PDF Summarizer on {datetime.utcnow().strftime('%Y-%m-%d')}</i>"
        story.append(Paragraph(footer_text, styles['Normal']))
        
        # Build PDF
        try:
            doc.build(story)
            buffer.seek(0)
            return buffer.read()
        except Exception as e:
            # If PDF generation fails (e.g., due to font issues with Unicode),
            # fall back to a simple text-based PDF
            print(f"PDF generation failed: {e}. Falling back to simple PDF.")
            
            # Reset buffer
            buffer = BytesIO()
            doc = SimpleDocTemplate(buffer, pagesize=letter)
            story = []
            
            # Create a simple PDF with ASCII-only content
            story.append(Paragraph("Summary Document", styles['Title']))
            story.append(Spacer(1, 0.5*inch))
            story.append(Paragraph(
                "Note: The original content contains special characters that could not be rendered in PDF format. "
                "Please use the Markdown or Text export options for full Unicode support.",
                styles['Normal']
            ))
            story.append(Spacer(1, 0.3*inch))
            
            # Try to include ASCII-only version of the summary
            ascii_summary = summary.encode('ascii', 'ignore').decode('ascii')
            if ascii_summary.strip():
                story.append(Paragraph("Summary (ASCII-only):", styles['Heading2']))
                story.append(Spacer(1, 0.2*inch))
                story.append(Paragraph(ascii_summary[:1000] + "...", styles['Normal']))
            
            doc.build(story)
            buffer.seek(0)
            return buffer.read()
    
    @staticmethod
    async def export_as_text(
        summary: str,
        filename: str,
        metadata: Optional[dict] = None,
        tags: Optional[list] = None,
    ) -> bytes:
        """Export summary as plain text."""
        lines = []
        
        # Title
        lines.append(filename)
        lines.append("=" * len(filename))
        lines.append("")
        
        # Metadata
        if metadata:
            lines.append("Document Information:")
            lines.append(f"  Pages: {metadata.get('pages', 'N/A')}")
            lines.append(f"  Size: {metadata.get('size_mb', 'N/A')} MB")
            if metadata.get('author'):
                lines.append(f"  Author: {metadata['author']}")
            lines.append(f"  Processed: {datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')}")
            lines.append("")
        
        # Tags
        if tags:
            lines.append("Tags:")
            lines.append(f"  {', '.join(tags)}")
            lines.append("")
        
        # Summary
        lines.append("Summary:")
        lines.append("-" * 8)
        lines.append("")
        lines.append(summary)
        lines.append("")
        
        # Footer
        lines.append("-" * 40)
        lines.append(f"Generated by PDF Summarizer on {datetime.utcnow().strftime('%Y-%m-%d')}")
        
        return "\n".join(lines).encode('utf-8')